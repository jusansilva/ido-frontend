"use client";
import PageTitle from '@/components/PageTitle';
import { useState } from 'react';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import { api } from '@/lib/api';
import { getSession } from '@/lib/auth';
import { useRouter } from 'next/navigation';
import Link from 'next/link';

export default function NewCampaignPage() {
  const session = getSession();
  const router = useRouter();
  
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    goal: '',
    category: '',
    image: null as File | null,
    endDate: ''
  });
  
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  if (!session) {
    if (typeof window !== 'undefined') router.push('/login');
  }

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0] || null;
    setFormData({ ...formData, image: file });
  };

  async function onSubmit(e: React.FormEvent) {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setMessage(null);
    
    // Validação básica
    if (!formData.title || !formData.description || !formData.goal || !formData.category || !formData.image || !formData.endDate) {
      setError('Por favor, preencha todos os campos obrigatórios.');
      setLoading(false);
      return;
    }
    
    try {
      // Por enquanto, criando só com o título (como a API atual aceita)
      // TODO: Atualizar API para aceitar todos os campos
      const c = await api.campaigns.create(formData.title);
      const pending = !c.approved;
      setMessage(pending ? 'Campanha criada e enviada para aprovação do admin.' : 'Campanha criada com sucesso.');
      setTimeout(() => router.push('/campaigns'), 1500);
    } catch (e: unknown) {
      setError(e instanceof Error ? e.message : 'Erro ao criar campanha');
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="min-h-screen bg-[var(--background)] text-[var(--foreground)] font-['Roboto',sans-serif]">
      <PageTitle title="Nova Campanha" />
      <Header />
      <div className="h-20 md:h-24" />
      <main className="max-w-3xl mx-auto px-4 py-8">
        <h1 className="text-2xl md:text-3xl font-bold text-primary mb-6">Criar Nova Campanha</h1>
        
        <form onSubmit={onSubmit} className="bg-[--surface] rounded-lg shadow p-6 space-y-6 border border-[var(--muted)]">
          
          {/* Título da Campanha */}
          <div>
            <label className="block text-sm font-semibold mb-2 text-primary">
              Título da Campanha <span className="text-error">*</span>
            </label>
            <input
              type="text"
              value={formData.title}
              onChange={(e) => setFormData({ ...formData, title: e.target.value })}
              placeholder="Ex: Ajude a construir um abrigo para animais"
              required
              className="w-full border border-[var(--muted)] rounded px-3 py-2 focus:outline-none focus:border-primary bg-transparent"
            />
          </div>

          {/* Descrição */}
          <div>
            <label className="block text-sm font-semibold mb-2 text-primary">
              Descrição <span className="text-error">*</span>
            </label>
            <textarea
              value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              rows={4}
              placeholder="Descreva o objetivo da campanha e como as doações serão usadas..."
              required
              className="w-full border border-[var(--muted)] rounded px-3 py-2 focus:outline-none focus:border-primary bg-transparent resize-none"
            />
          </div>

          {/* Meta de Arrecadação */}
          <div>
            <label className="block text-sm font-semibold mb-2 text-primary">
              Meta de Arrecadação (R$) <span className="text-error">*</span>
            </label>
            <input
              type="number"
              value={formData.goal}
              onChange={(e) => setFormData({ ...formData, goal: e.target.value })}
              placeholder="Ex: 10000"
              min="1"
              step="0.01"
              required
              className="w-full border border-[var(--muted)] rounded px-3 py-2 focus:outline-none focus:border-primary bg-transparent"
            />
          </div>

          {/* Categoria */}
          <div>
            <label className="block text-sm font-semibold mb-2 text-primary">
              Categoria <span className="text-error">*</span>
            </label>
            <select
              value={formData.category}
              onChange={(e) => setFormData({ ...formData, category: e.target.value })}
              required
              className="w-full border border-[var(--muted)] rounded px-3 py-2 focus:outline-none focus:border-primary bg-transparent"
            >
              <option value="">Selecione uma categoria</option>
              <option value="saude">Saúde</option>
              <option value="animais">Animais</option>
              <option value="educacao">Educação</option>
              <option value="emergencia">Emergência</option>
              <option value="outros">Outros</option>
            </select>
          </div>

          {/* Imagem de Capa */}
          <div>
            <label className="block text-sm font-semibold mb-2 text-primary">
              Imagem de Capa <span className="text-error">*</span>
            </label>
            <input
              type="file"
              onChange={handleFileChange}
              accept="image/*"
              required
              className="w-full border border-[var(--muted)] rounded px-3 py-2 focus:outline-none focus:border-primary bg-transparent file:mr-4 file:py-2 file:px-4 file:rounded file:border-0 file:text-sm file:font-semibold file:bg-primary file:text-white hover:file:opacity-90"
            />
            <p className="text-sm text-gray-600 mt-1">
              Selecione uma imagem representativa da campanha (JPG, PNG, etc.).
            </p>
            {formData.image && (
              <p className="text-sm text-success mt-1">
                ✓ Arquivo selecionado: {formData.image.name}
              </p>
            )}
          </div>

          {/* Data de Término */}
          <div>
            <label className="block text-sm font-semibold mb-2 text-primary">
              Data de Término <span className="text-error">*</span>
            </label>
            <input
              type="date"
              value={formData.endDate}
              onChange={(e) => setFormData({ ...formData, endDate: e.target.value })}
              min={new Date().toISOString().split('T')[0]}
              required
              className="w-full border border-[var(--muted)] rounded px-3 py-2 focus:outline-none focus:border-primary bg-transparent"
            />
          </div>

          {/* Mensagens */}
          {message && (
            <div className="p-4 rounded-lg bg-success/10 border border-success">
              <p className="text-success">{message}</p>
            </div>
          )}
          {error && (
            <div className="p-4 rounded-lg bg-error/10 border border-error">
              <p className="text-error">{error}</p>
            </div>
          )}

          {/* Botões */}
          <div className="flex gap-3 pt-2">
            <button 
              type="submit" 
              disabled={loading} 
              className="px-6 py-3 rounded-lg bg-success text-white font-semibold hover:opacity-90 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? 'Criando...' : 'Criar Campanha'}
            </button>
            <Link 
              href="/campaigns"
              className="px-6 py-3 rounded-lg border-2 border-primary text-primary font-semibold hover:bg-[var(--hover-surface)]"
            >
              Cancelar
            </Link>
          </div>
        </form>
      </main>
      <Footer />
    </div>
  );
}
          <div className="flex gap-3">
            <button type="submit" disabled={loading} className="px-4 py-2 rounded-lg bg-primary text-white">{loading ? 'Enviando...' : 'Criar'}</button>
            <Link className="px-4 py-2 rounded-lg border border-primary text-primary" href="/campaigns">Cancelar</Link>
          </div>
          {message && <p className="text-success">{message}</p>}
          {error && <p className="text-error">{error}</p>}
        </form>
      </main>
      <Footer />
    </div>
  );
}
